{"version":3,"sources":["logo.svg","queryql.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","gql","_templateObject","ExchangeRates","react_default","a","createElement","react_apollo_browser_umd","query","_templateObject2","_ref","loading","error","data","books","map","_ref2","index","title","author","key","style","paddingLeft","textAlign","concat","client","ApolloClient","uri","App","className","queryql_ExchangeRates","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,miBCIvBC,IAAHC,KAAd,IAmCaC,EAAgB,kBAC3BC,EAAAC,EAAAC,cAACC,EAAA,MAAD,CACEC,MAAOP,IAAFQ,MASJ,SAAAC,GAA8B,IAA3BC,EAA2BD,EAA3BC,QAASC,EAAkBF,EAAlBE,MAAOC,EAAWH,EAAXG,KAClB,OAAIF,EAAgBP,EAAAC,EAAAC,cAAA,uBAChBM,EAAcR,EAAAC,EAAAC,cAAA,qBAEXO,EAAKC,MAAMC,IAAI,SAAAC,EAAoBC,GAApB,IAAGC,EAAHF,EAAGE,MAAOC,EAAVH,EAAUG,OAAV,OACpBf,EAAAC,EAAAC,cAAA,OAAKc,IAAKH,GACRb,EAAAC,EAAAC,cAAA,KAAGe,MAAO,CAAEC,YAAa,OAAQC,UAAW,SAC1CnB,EAAAC,EAAAC,cAAA,WADF,UAAAkB,OAEaN,GACXd,EAAAC,EAAAC,cAAA,WAHF,WAAAkB,OAIcL,UCrDlBM,EAAS,UAAIC,GAAa,CAE9BC,IAAK,2BAoBQC,mLAfX,OACExB,EAAAC,EAAAC,cAACC,EAAA,eAAD,CAAgBkB,OAAQA,GACtBrB,EAAAC,EAAAC,cAAA,OAAKuB,UAAU,OACbzB,EAAAC,EAAAC,cAAA,6CAGAF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACwB,EAAD,gBATMC,aCPlBC,IAASC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.98db828a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import gql from 'graphql-tag';\nimport { ApolloProvider, Query, Mutation } from 'react-apollo';\nimport React from 'react';\n\nconst ADD_TODO = gql`\n  mutation NewTask($title: String!) {\n    newTask(title: $title) {\n      title\n    }\n  }\n`;\n\n// const AddTodo = () => {\n//   let input;\n\n//   return (\n//     <Mutation mutation={ADD_TODO}>\n//       {(newTask, { data }) => (\n//         <div>\n//           <form\n//             onSubmit={e => {\n//               e.preventDefault();\n//               newTask({ variables: { title: input.value } });\n//               input.value = '';\n//             }}\n//           >\n//             <input\n//               ref={node => {\n//                 input = node;\n//               }}\n//             />\n//             <button type=\"submit\">Add Todo</button>\n//           </form>\n//         </div>\n//       )}\n//     </Mutation>\n//   );\n// };\n\nexport const ExchangeRates = () => (\n  <Query\n    query={gql`\n      {\n        books {\n          title\n          author\n        }\n      }\n    `}\n  >\n    {({ loading, error, data }) => {\n      if (loading) return <p>Loading...</p>;\n      if (error) return <p>Error :(</p>;\n\n      return data.books.map(({ title, author }, index) => (\n        <div key={index}>\n          <p style={{ paddingLeft: '15px', textAlign: 'left' }}>\n            <br />\n            {`title: ${title}`}\n            <br />\n            {`author: ${author}`}\n          </p>\n        </div>\n      ));\n    }}\n  </Query>\n);\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { ApolloProvider } from 'react-apollo';\nimport { ExchangeRates } from './queryql';\nimport ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n  //   uri: 'http://3349b50b.ngrok.io/graphql/',\n  uri: 'http://localhost:4000/',\n});\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <div className=\"App\">\n          <p>\n            React Graphql 起手式\n          </p>\n          <div>\n            <ExchangeRates />\n          </div>\n        </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}